require File.expand_path(File.join(File.dirname(__FILE__), '..', 'proxysql'))
Puppet::Type.type(:proxy_mysql_galera_hostgroup).provide(:proxysql, parent: Puppet::Provider::Proxysql) do
  desc 'Manage galera hostgroup for a ProxySQL instance.'
  commands mysql: 'mysql'

  # Build a property_hash containing all the discovered information about MySQL
  # Galera servers.
  def self.instances
    instances = []
    hostgroups = mysql([defaults_file, '-NBe',
                        'SELECT `writer_hostgroup`, `backup_writer_hostgroup`, `reader_hostgroup`, `offline_hostgroup`, `active`,`max_writers`,`writer_is_also_reader`,`max_transactions_behind`, `comment` FROM `mysql_galera_hostgroups`'].compact).split(%r{\n})

    # To reduce the number of calls to MySQL we collect all the properties in
    # one big swoop.
    hostgroups.each do |line|
      writer_hostgroup, backup_writer_hostgroup, reader_hostgroup, offline_hostgroup, active, max_writers, writer_is_also_reader, max_transactions_behind, comment = line.split(%r{\t})
      name = "#{writer_hostgroup}-#{backup_writer_hostgroup}-#{reader_hostgroup}-#{offline_hostgroup}"

      instances << new(
        name: name,
        ensure: :present,
        writer_hostgroup: writer_hostgroup,
        backup_writer_hostgroup: backup_writer_hostgroup,
        reader_hostgroup: reader_hostgroup,
        offline_hostgroup: offline_hostgroup,
        active: active,
        max_writers: max_writers,
        writer_is_also_reader: writer_is_also_reader,
        max_transactions_behind: max_transactions_behind,
        comment: comment
      )
    end
    instances
  end

  # We iterate over each proxy_mysql_galera_hostgroup entry in the catalog and compare it against
  # the contents of the property_hash generated by self.instances
  def self.prefetch(resources)
    hostgroups = instances
    resources.keys.each do |name|
      provider = hostgroups.find { |hostgroup| hostgroup.name == name }
      resources[name].provider = provider if provider
    end
  end

  def create
    _name = @resource[:name]
    writer_hostgroup = @resource.value(:writer_hostgroup)
    backup_writer_hostgroup = @resource.value(:backup_writer_hostgroup)
    reader_hostgroup = @resource.value(:reader_hostgroup)
    offline_hostgroup = @resource.value(:offline_hostgroup)
    active = @resource.value(:active)
    max_writers = @resource.value(:max_writers)
    writer_is_also_reader = @resource.value(:writer_is_also_reader)
    max_transactions_behind = @resource.value(:max_transactions_behind)
    comment = @resource.value(:comment) || ''

    query = 'INSERT INTO `mysql_galera_hostgroups` (`writer_hostgroup`, `backup_writer_hostgroup`, `reader_hostgroup`, `offline_hostgroup`, `active`,`max_writers`,`writer_is_also_reader`,`max_transactions_behind`, `comment`)'
    query << " VALUES (#{writer_hostgroup}, #{backup_writer_hostgroup}, #{reader_hostgroup}, #{offline_hostgroup}, #{active}, #{max_writers}, #{writer_is_also_reader}, #{max_transactions_behind}, '#{comment}')"
    mysql([defaults_file, '-e', query].compact)
    @property_hash[:ensure] = :present

    exists? ? (return true) : (return false)
  end

  def destroy
    writer_hostgroup = @resource.value(:writer_hostgroup)
    backup_writer_hostgroup = @resource.value(:backup_writer_hostgroup)
    reader_hostgroup = @resource.value(:reader_hostgroup)
    offline_hostgroup = @resource.value(:offline_hostgroup)
    query = 'DELETE FROM `mysql_galera_hostgroups`'
    query << " WHERE `writer_hostgroup` =  #{writer_hostgroup} AND `backup_writer_hostgroup` = #{backup_writer_hostgroup} `reader_hostgroup` = #{reader_hostgroup} AND `offline_hostgroup` = #{offline_hostgroup}"
    mysql([defaults_file, '-e', query].compact)

    @property_hash.clear
    exists? ? (return false) : (return true)
  end

  def exists?
    @property_hash[:ensure] == :present || false
  end

  def flush
    @property_hash.clear
    load_to_runtime = @resource[:load_to_runtime]
    mysql([defaults_file, '-NBe', 'LOAD MYSQL SERVERS TO RUNTIME'].compact) if load_to_runtime == :true

    save_to_disk = @resource[:save_to_disk]
    mysql([defaults_file, '-NBe', 'SAVE MYSQL SERVERS TO DISK'].compact) if save_to_disk == :true
  end

  # Generates method for all properties of the property_hash
  mk_resource_methods

  def comment=(value)
    writer_hostgroup = @resource.value(:writer_hostgroup)
    backup_writer_hostgroup = @resource.value(:backup_writer_hostgroup)
    reader_hostgroup = @resource.value(:reader_hostgroup)
    offline_hostgroup = @resource.value(:offline_hostgroup)

    query = "UPDATE mysql_galera_hostgroups SET `comment` = '#{value}'"
    query << " WHERE `writer_hostgroup` =  #{writer_hostgroup} AND `backup_writer_hostgroup` = #{backup_writer_hostgroup}AND `reader_hostgroup` = #{reader_hostgroup} AND `offline_hostgroup` = #{offline_hostgroup}"
    mysql([defaults_file, '-e', query].compact)

    @property_hash.clear
    exists? ? (return false) : (return true)
  end
end
